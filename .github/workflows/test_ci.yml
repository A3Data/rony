# CI for testing package internal code

name: Test package

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  script_lambda_package:
    name: Test script lambda package
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Build Lambda package
      run: |
        sh rony/base_files/scripts/build_lambda_package.sh

  build_test_lambda:
    name: Build and test Lambda
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Install dependencies
      run: |
        pip install -U pip
        pip install -r rony/base_files/etl/lambda_requirements.txt
        pip install pytest boto3

    - name: Run tests on lambda function
      env:
        BUCKET: "my-bucket"
        REGION: "my-region"
      run: |
        cd rony/base_files/tests
        python -m pytest test_lambda.py

  build_test_dags:
    name: Build and test dags
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

#    - name: Set up Python 3.8
#      uses: actions/setup-python@v2
#      with:
#        python-version: 3.8

    - name: 'Airflow - Setup Airflow'
      uses: jayamanikharyono/airflow-dag-action@v0.1-alpha
#      with:
#        dagPaths: rony/base_files/dags

    - name: 'Validate DAGs'
      run: |
        pip install -U pip
        pip install pytest
        cd rony/base_files/tests
        python -m pytest test_dags.py

  build_docker:
    name: Build and test docker image
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Build image
      run: |
        cd rony/base_files/etl
        docker build -t "${PWD##*/}" .
        docker run "${PWD##*/}"

  terraform_validate:
    name: Terraform validation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: HashiCorp - Setup Terraform
      uses: hashicorp/setup-terraform@v1.2.1

    - name: create zipfile for validation
      run: |
        touch rony/base_files/infrastructure/lambda_function_payload.zip
    - name: Terraform validate
      run: |
        cd rony/base_files/infrastructure
        terraform init
        terraform validate

  terragrunt_validate:
    name: Terragrunt validation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: HashiCorp - Setup Terraform
      uses: hashicorp/setup-terraform@v1.2.1

    - name: HashiCorp - Setup Terragrunt
      uses: autero1/action-terragrunt@v1.0.0
      with:
        terragrunt_version: 0.28.2

    - name: create zipfile for validation
      run: |
        touch rony/base_files/infrastructure/lambda_function_payload.zip

    - name: Terragrunt validate
      run: |
        cd rony/base_files/infrastructure
        terragrunt validate

  package_install:
    name: Test package install
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9]
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest
        pip install coverage
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install .
    - name: Test with pytest
      run: |
        cd rony/tests
        coverage run -m pytest && coverage report -m

  test_project:
    name: Test project structure
    runs-on: ubuntu-latest
    needs: [package_install]
    steps:
    - uses: actions/checkout@v2

    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install .
        rony info
    - name: Test Project structure
      run: |
        rony new projex
        cd projex
        cat etl/Dockerfile
        cat dags/titanic_example.py
        cat infrastructure/s3.tf
        cat scripts/build_lambda_package.sh